// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package internal

import (
	"encoding/json"
	"fmt"
	"reflect"
)

// UnmarshalJSON implements json.Unmarshaler.
func (j *VrmMetaSchemaJsonCommercialUssageName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VrmMetaSchemaJsonCommercialUssageName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VrmMetaSchemaJsonCommercialUssageName, v)
	}
	*j = VrmMetaSchemaJsonCommercialUssageName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VrmMetaSchemaJsonViolentUssageName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VrmMetaSchemaJsonViolentUssageName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VrmMetaSchemaJsonViolentUssageName, v)
	}
	*j = VrmMetaSchemaJsonViolentUssageName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VrmMetaSchemaJsonAllowedUserName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VrmMetaSchemaJsonAllowedUserName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VrmMetaSchemaJsonAllowedUserName, v)
	}
	*j = VrmMetaSchemaJsonAllowedUserName(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VrmMetaSchemaJsonSexualUssageName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VrmMetaSchemaJsonSexualUssageName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VrmMetaSchemaJsonSexualUssageName, v)
	}
	*j = VrmMetaSchemaJsonSexualUssageName(v)
	return nil
}

type VrmMetaSchemaJson struct {
	// A person who can perform with this avatar
	AllowedUserName *VrmMetaSchemaJsonAllowedUserName `json:"allowedUserName,omitempty"`

	// Author of VRM model
	Author *string `json:"author,omitempty"`

	// For commercial use
	CommercialUssageName *VrmMetaSchemaJsonCommercialUssageName `json:"commercialUssageName,omitempty"`

	// Contact Information of VRM model author
	ContactInformation *string `json:"contactInformation,omitempty"`

	// License type
	LicenseName *VrmMetaSchemaJsonLicenseName `json:"licenseName,omitempty"`

	// If “Other” is selected, put the URL link of the license document here.
	OtherLicenseUrl *string `json:"otherLicenseUrl,omitempty"`

	// If there are any conditions not mentioned above, put the URL link of the
	// license document here.
	OtherPermissionUrl *string `json:"otherPermissionUrl,omitempty"`

	// Reference of VRM model
	Reference *string `json:"reference,omitempty"`

	// Permission to perform sexual acts with this avatar
	SexualUssageName *VrmMetaSchemaJsonSexualUssageName `json:"sexualUssageName,omitempty"`

	// Thumbnail of VRM model
	Texture *int `json:"texture,omitempty"`

	// Title of VRM model
	Title *string `json:"title,omitempty"`

	// Version of VRM model
	Version *string `json:"version,omitempty"`

	// Permission to perform violent acts with this avatar
	ViolentUssageName *VrmMetaSchemaJsonViolentUssageName `json:"violentUssageName,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *VrmMetaSchemaJsonLicenseName) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_VrmMetaSchemaJsonLicenseName {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_VrmMetaSchemaJsonLicenseName, v)
	}
	*j = VrmMetaSchemaJsonLicenseName(v)
	return nil
}

type VrmMetaSchemaJsonAllowedUserName string

const VrmMetaSchemaJsonAllowedUserNameEveryone VrmMetaSchemaJsonAllowedUserName = "Everyone"
const VrmMetaSchemaJsonAllowedUserNameExplicitlyLicensedPerson VrmMetaSchemaJsonAllowedUserName = "ExplicitlyLicensedPerson"
const VrmMetaSchemaJsonAllowedUserNameOnlyAuthor VrmMetaSchemaJsonAllowedUserName = "OnlyAuthor"

type VrmMetaSchemaJsonCommercialUssageName string

const VrmMetaSchemaJsonCommercialUssageNameAllow VrmMetaSchemaJsonCommercialUssageName = "Allow"
const VrmMetaSchemaJsonCommercialUssageNameDisallow VrmMetaSchemaJsonCommercialUssageName = "Disallow"

type VrmMetaSchemaJsonLicenseName string

const VrmMetaSchemaJsonLicenseNameCC0 VrmMetaSchemaJsonLicenseName = "CC0"
const VrmMetaSchemaJsonLicenseNameCCBY VrmMetaSchemaJsonLicenseName = "CC_BY"
const VrmMetaSchemaJsonLicenseNameCCBYNC VrmMetaSchemaJsonLicenseName = "CC_BY_NC"
const VrmMetaSchemaJsonLicenseNameCCBYNCND VrmMetaSchemaJsonLicenseName = "CC_BY_NC_ND"
const VrmMetaSchemaJsonLicenseNameCCBYNCSA VrmMetaSchemaJsonLicenseName = "CC_BY_NC_SA"
const VrmMetaSchemaJsonLicenseNameCCBYND VrmMetaSchemaJsonLicenseName = "CC_BY_ND"
const VrmMetaSchemaJsonLicenseNameCCBYSA VrmMetaSchemaJsonLicenseName = "CC_BY_SA"
const VrmMetaSchemaJsonLicenseNameOther VrmMetaSchemaJsonLicenseName = "Other"
const VrmMetaSchemaJsonLicenseNameRedistributionProhibited VrmMetaSchemaJsonLicenseName = "Redistribution_Prohibited"

type VrmMetaSchemaJsonSexualUssageName string

const VrmMetaSchemaJsonSexualUssageNameAllow VrmMetaSchemaJsonSexualUssageName = "Allow"
const VrmMetaSchemaJsonSexualUssageNameDisallow VrmMetaSchemaJsonSexualUssageName = "Disallow"

type VrmMetaSchemaJsonViolentUssageName string

const VrmMetaSchemaJsonViolentUssageNameAllow VrmMetaSchemaJsonViolentUssageName = "Allow"
const VrmMetaSchemaJsonViolentUssageNameDisallow VrmMetaSchemaJsonViolentUssageName = "Disallow"

var enumValues_VrmMetaSchemaJsonAllowedUserName = []interface{}{
	"OnlyAuthor",
	"ExplicitlyLicensedPerson",
	"Everyone",
}
var enumValues_VrmMetaSchemaJsonCommercialUssageName = []interface{}{
	"Disallow",
	"Allow",
}
var enumValues_VrmMetaSchemaJsonLicenseName = []interface{}{
	"Redistribution_Prohibited",
	"CC0",
	"CC_BY",
	"CC_BY_NC",
	"CC_BY_SA",
	"CC_BY_NC_SA",
	"CC_BY_ND",
	"CC_BY_NC_ND",
	"Other",
}
var enumValues_VrmMetaSchemaJsonSexualUssageName = []interface{}{
	"Disallow",
	"Allow",
}
var enumValues_VrmMetaSchemaJsonViolentUssageName = []interface{}{
	"Disallow",
	"Allow",
}
